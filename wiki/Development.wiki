#summary HOWTO for developers
#labels Phase-Implementation,Deprecated

= Introduction =

This file is HOWTO for XMPP dissector developers. Before reading this doc you should be familiar with Wireshark README files, especialy README.developer and README.plugins.

== How XMPP dissector displays packets ==

Packet that looks like:
{{{
<iq
    from='marok.test@gmail.com/gmail.9EB5BC18'
    to='marok@marook.dyndns.org/c92ed70a'
    type='set'
    id='90E8492345BCC05E'>
    <jin:jingle
        action='session-initiate'
        sid='c1448747008' initiator='marok.test@gmail.com/gmail.9EB5BC18'
        xmlns:jin='urn:xmpp:jingle:1'>
        <jin:content
            name='video'
            creator='initiator'>
            <rtp:description media='video' xmlns:rtp='urn:xmpp:jingle:apps:rtp:1'>
                <rtp:payload-type id='99' name='H264-SVC'>
                    ...
                </rtp:payload-type>              
            </rtp:description>
            <p:transport xmlns:p='http://www.google.com/transport/p2p'/>
        </jin:content>
    </jin:jingle>
</iq>
}}}
is displayed by Wireshark like in the screenshoot:

[http://dl.dropbox.com/u/4436801/wireshark_xmpp/ws_zrzut.png]

Areas marked in the picture above means:
  # element name - jingle
  # namespace abbreviation - jin
  # important arguments
  # all arguments

= Files structure =

XMPP dissector is written as a plugin. Hence all files related to this dissector are stored in plugins/xmpp directory.

Files and their content:
  * packet-xmpp.c _(main file of the XMPP dissector)_
    * header fields (hf`_``*`) and subtree ids (ett`_``*`) initializations
    * XMPP_PORT
    * dissect_xmpp, proto_reg_handoff_xmpp, proto_register_xmpp - characteristic functions for each dissector
  * packet-xmpp.h
    * header fields (hf`_``*`) and subtree ids (ett`_``*`) exports
    * ETT_UNKNOWN_LEN - it describes depth of tree for unknown elements. If depth of tree for unknown element is higher than ETT_UNKNOWN_LEN then packet is set as malformed. In this case it should be increased.
  * xmpp-utils.c
    * functions responsible for: getting data from XML dissector, displaying them into protocol tree, managing memory
  * xmpp-`*`.c
    * functions that process specific elements